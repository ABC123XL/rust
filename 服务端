use std::net::{TcpListener,TcpStream};
use std::thread;
use std::time;
use std::io::{self,Read,Write};
//服务端
fn handle_client(mut stream:TcpStream) -> io::Result<()>{
    let mut buf = [0;512];
    for _ in 0..1000{
        let bytes_read = stream.read(&mut buf)?;
        if bytes_read == 0{
            return Ok(());
        }
        stream.write(&buf[..bytes_read])?;
        thread::sleep(time::Duration::from_secs(1));
    }
    Ok(())
}

fn main() -> io::Result<()> {
    //创建监听器
    let listener = TcpListener::bind("127.0.0.1:8080")?;
    let mut thread_vac: Vec<thread::JoinHandle<()>> = Vec::new();
    for stream in listener.incoming(){
        let stream = stream.expect("failed");
        let handle = thread::spawn(move ||{
            handle_client(stream).unwrap_or_else(|error| eprintln!("{:?}",error))
        });
        thread_vac.push(handle);

    }
    for handle in thread_vac{
        handle.join().unwrap();

    }
    Ok(())
}
